# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_edge')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_edge')
    _edge = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_edge', [dirname(__file__)])
        except ImportError:
            import _edge
            return _edge
        if fp is not None:
            try:
                _mod = imp.load_module('_edge', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _edge = swig_import_helper()
    del swig_import_helper
else:
    import _edge
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _edge.SHARED_PTR_DISOWN
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _edge.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _edge.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _edge.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _edge.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _edge.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _edge.SwigPyIterator_equal(self, x)

    def copy(self):
        return _edge.SwigPyIterator_copy(self)

    def next(self):
        return _edge.SwigPyIterator_next(self)

    def __next__(self):
        return _edge.SwigPyIterator___next__(self)

    def previous(self):
        return _edge.SwigPyIterator_previous(self)

    def advance(self, n):
        return _edge.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _edge.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _edge.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _edge.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _edge.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _edge.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _edge.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _edge.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _edge.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _edge.StringVector___nonzero__(self)

    def __bool__(self):
        return _edge.StringVector___bool__(self)

    def __len__(self):
        return _edge.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _edge.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _edge.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _edge.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _edge.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _edge.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _edge.StringVector___setitem__(self, *args)

    def pop(self):
        return _edge.StringVector_pop(self)

    def append(self, x):
        return _edge.StringVector_append(self, x)

    def empty(self):
        return _edge.StringVector_empty(self)

    def size(self):
        return _edge.StringVector_size(self)

    def swap(self, v):
        return _edge.StringVector_swap(self, v)

    def begin(self):
        return _edge.StringVector_begin(self)

    def end(self):
        return _edge.StringVector_end(self)

    def rbegin(self):
        return _edge.StringVector_rbegin(self)

    def rend(self):
        return _edge.StringVector_rend(self)

    def clear(self):
        return _edge.StringVector_clear(self)

    def get_allocator(self):
        return _edge.StringVector_get_allocator(self)

    def pop_back(self):
        return _edge.StringVector_pop_back(self)

    def erase(self, *args):
        return _edge.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _edge.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _edge.StringVector_push_back(self, x)

    def front(self):
        return _edge.StringVector_front(self)

    def back(self):
        return _edge.StringVector_back(self)

    def assign(self, n, x):
        return _edge.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _edge.StringVector_resize(self, *args)

    def insert(self, *args):
        return _edge.StringVector_insert(self, *args)

    def reserve(self, n):
        return _edge.StringVector_reserve(self, n)

    def capacity(self):
        return _edge.StringVector_capacity(self)
    __swig_destroy__ = _edge.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _edge.StringVector_swigregister
StringVector_swigregister(StringVector)

CONSOLE = _edge.CONSOLE
LOGFILE = _edge.LOGFILE
JOURNAL = _edge.JOURNAL
SYSLOG = _edge.SYSLOG
EMERG = _edge.EMERG
FATAL = _edge.FATAL
ALERT = _edge.ALERT
CRIT = _edge.CRIT
ERROR = _edge.ERROR
WARN = _edge.WARN
NOTICE = _edge.NOTICE
INFO = _edge.INFO
DEBUG = _edge.DEBUG
NOTSET = _edge.NOTSET
class Logger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Logger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Logger, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Log(self, priorityLevel_in, message_in):
        return _edge.Logger_Log(self, priorityLevel_in, message_in)

    def Warn(self, message_in):
        return _edge.Logger_Warn(self, message_in)

    def Info(self, message_in):
        return _edge.Logger_Info(self, message_in)

    def Error(self, message_in):
        return _edge.Logger_Error(self, message_in)

    def Debug(self, message_in):
        return _edge.Logger_Debug(self, message_in)

    def AddAppender(self, type_in):
        return _edge.Logger_AddAppender(self, type_in)
    __swig_destroy__ = _edge.delete_Logger
    __del__ = lambda self: None
Logger_swigregister = _edge.Logger_swigregister
Logger_swigregister(Logger)


def CreateLoggerInstance(logger_name_in):
    return _edge.CreateLoggerInstance(logger_name_in)
CreateLoggerInstance = _edge.CreateLoggerInstance
class configMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, configMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, configMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _edge.configMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _edge.configMap___nonzero__(self)

    def __bool__(self):
        return _edge.configMap___bool__(self)

    def __len__(self):
        return _edge.configMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _edge.configMap___getitem__(self, key)

    def __delitem__(self, key):
        return _edge.configMap___delitem__(self, key)

    def has_key(self, key):
        return _edge.configMap_has_key(self, key)

    def keys(self):
        return _edge.configMap_keys(self)

    def values(self):
        return _edge.configMap_values(self)

    def items(self):
        return _edge.configMap_items(self)

    def __contains__(self, key):
        return _edge.configMap___contains__(self, key)

    def key_iterator(self):
        return _edge.configMap_key_iterator(self)

    def value_iterator(self):
        return _edge.configMap_value_iterator(self)

    def __setitem__(self, *args):
        return _edge.configMap___setitem__(self, *args)

    def asdict(self):
        return _edge.configMap_asdict(self)

    def __init__(self, *args):
        this = _edge.new_configMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _edge.configMap_empty(self)

    def size(self):
        return _edge.configMap_size(self)

    def swap(self, v):
        return _edge.configMap_swap(self, v)

    def begin(self):
        return _edge.configMap_begin(self)

    def end(self):
        return _edge.configMap_end(self)

    def rbegin(self):
        return _edge.configMap_rbegin(self)

    def rend(self):
        return _edge.configMap_rend(self)

    def clear(self):
        return _edge.configMap_clear(self)

    def get_allocator(self):
        return _edge.configMap_get_allocator(self)

    def count(self, x):
        return _edge.configMap_count(self, x)

    def erase(self, *args):
        return _edge.configMap_erase(self, *args)

    def find(self, x):
        return _edge.configMap_find(self, x)

    def lower_bound(self, x):
        return _edge.configMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _edge.configMap_upper_bound(self, x)
    __swig_destroy__ = _edge.delete_configMap
    __del__ = lambda self: None
configMap_swigregister = _edge.configMap_swigregister
configMap_swigregister(configMap)

Status_OK = _edge.Status_OK
Status_FAIL = _edge.Status_FAIL
Status_ERROR = _edge.Status_ERROR
Status_CREATED = _edge.Status_CREATED
Status_REGISTERED = _edge.Status_REGISTERED
Status_DEREGISTERED = _edge.Status_DEREGISTERED
Status_WARNING = _edge.Status_WARNING
Status_DATABUS_DISCONNECTED = _edge.Status_DATABUS_DISCONNECTED
class MessageStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessageStruct, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _edge.new_MessageStruct()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getStatus(self):
        return _edge.MessageStruct_getStatus(self)

    def getMessageId(self):
        return _edge.MessageStruct_getMessageId(self)

    def getPayload(self):
        return _edge.MessageStruct_getPayload(self)

    def setStatus(self, tStatus):
        return _edge.MessageStruct_setStatus(self, tStatus)

    def setMessageId(self, strMessageId):
        return _edge.MessageStruct_setMessageId(self, strMessageId)

    def setPayload(self, strPayload):
        return _edge.MessageStruct_setPayload(self, strPayload)
    __swig_destroy__ = _edge.delete_MessageStruct
    __del__ = lambda self: None
MessageStruct_swigregister = _edge.MessageStruct_swigregister
MessageStruct_swigregister(MessageStruct)

class Consumer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Consumer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Consumer, name)
    __repr__ = _swig_repr

    def __init__(self, tMessageIdList):
        this = _edge.new_Consumer(tMessageIdList)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _edge.delete_Consumer
    __del__ = lambda self: None

    def pop(self):
        return _edge.Consumer_pop(self)

    def getState(self):
        return _edge.Consumer_getState(self)

    def getClientId(self):
        return _edge.Consumer_getClientId(self)

    def getMessageIdList(self):
        return _edge.Consumer_getMessageIdList(self)

    def setManifestLink(self, pManifestLink):
        return _edge.Consumer_setManifestLink(self, pManifestLink)
Consumer_swigregister = _edge.Consumer_swigregister
Consumer_swigregister(Consumer)

class Producer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Producer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Producer, name)
    __repr__ = _swig_repr

    def __init__(self, tMessageIdList):
        this = _edge.new_Producer(tMessageIdList)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _edge.delete_Producer
    __del__ = lambda self: None

    def push(self, strMessageId, strPayload):
        return _edge.Producer_push(self, strMessageId, strPayload)

    def getState(self):
        return _edge.Producer_getState(self)

    def getClientId(self):
        return _edge.Producer_getClientId(self)

    def getMessageIdList(self):
        return _edge.Producer_getMessageIdList(self)

    def setManifestLink(self, pManifestLink):
        return _edge.Producer_setManifestLink(self, pManifestLink)
Producer_swigregister = _edge.Producer_swigregister
Producer_swigregister(Producer)

class CallbackConsumer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallbackConsumer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CallbackConsumer, name)
    __repr__ = _swig_repr

    def __init__(self, tMessageIdList):
        if self.__class__ == CallbackConsumer:
            _self = None
        else:
            _self = self
        this = _edge.new_CallbackConsumer(_self, tMessageIdList)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _edge.delete_CallbackConsumer
    __del__ = lambda self: None

    def onData(self, arg0, arg1):
        return _edge.CallbackConsumer_onData(self, arg0, arg1)

    def getState(self):
        return _edge.CallbackConsumer_getState(self)

    def getMessageIdList(self):
        return _edge.CallbackConsumer_getMessageIdList(self)

    def setManifestLink(self, pManifestLink):
        return _edge.CallbackConsumer_setManifestLink(self, pManifestLink)
    def __disown__(self):
        self.this.disown()
        _edge.disown_CallbackConsumer(self)
        return weakref_proxy(self)
CallbackConsumer_swigregister = _edge.CallbackConsumer_swigregister
CallbackConsumer_swigregister(CallbackConsumer)

class DataBus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataBus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataBus, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getInstance = staticmethod(_edge.DataBus_getInstance)
    else:
        getInstance = _edge.DataBus_getInstance

    def getDataBusState(self):
        return _edge.DataBus_getDataBusState(self)

    def registerConsumer(self, tConsumerObject):
        return _edge.DataBus_registerConsumer(self, tConsumerObject)

    def registerProducer(self, tProducerObject):
        return _edge.DataBus_registerProducer(self, tProducerObject)

    def registerCallbackConsumer(self, pCallbackConsumerObject):
        return _edge.DataBus_registerCallbackConsumer(self, pCallbackConsumerObject)

    def deregisterConsumer(self, tConsumerObject):
        return _edge.DataBus_deregisterConsumer(self, tConsumerObject)

    def deregisterProducer(self, tProducerObject):
        return _edge.DataBus_deregisterProducer(self, tProducerObject)

    def deregisterCallbackConsumer(self, pCallbackConsumerObject):
        return _edge.DataBus_deregisterCallbackConsumer(self, pCallbackConsumerObject)

    def reset(self):
        return _edge.DataBus_reset(self)
DataBus_swigregister = _edge.DataBus_swigregister
DataBus_swigregister(DataBus)

def DataBus_getInstance():
    return _edge.DataBus_getInstance()
DataBus_getInstance = _edge.DataBus_getInstance

class ConfigReturnPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigReturnPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigReturnPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _edge.new_ConfigReturnPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _edge.ConfigReturnPair_first_set
    __swig_getmethods__["first"] = _edge.ConfigReturnPair_first_get
    if _newclass:
        first = _swig_property(_edge.ConfigReturnPair_first_get, _edge.ConfigReturnPair_first_set)
    __swig_setmethods__["second"] = _edge.ConfigReturnPair_second_set
    __swig_getmethods__["second"] = _edge.ConfigReturnPair_second_get
    if _newclass:
        second = _swig_property(_edge.ConfigReturnPair_second_get, _edge.ConfigReturnPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _edge.delete_ConfigReturnPair
    __del__ = lambda self: None
ConfigReturnPair_swigregister = _edge.ConfigReturnPair_swigregister
ConfigReturnPair_swigregister(ConfigReturnPair)

EDGE_SUCCESS = _edge.EDGE_SUCCESS
EDGE_ERROR = _edge.EDGE_ERROR
EDGE_FAILURE = _edge.EDGE_FAILURE
class EdgeStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EdgeStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EdgeStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _edge.new_EdgeStatus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Success(self):
        return _edge.EdgeStatus_Success(self)

    def GetMessage(self):
        return _edge.EdgeStatus_GetMessage(self)

    def GetCode(self):
        return _edge.EdgeStatus_GetCode(self)

    def __eq__(self, x):
        return _edge.EdgeStatus___eq__(self, x)

    def __ne__(self, x):
        return _edge.EdgeStatus___ne__(self, x)
    __swig_destroy__ = _edge.delete_EdgeStatus
    __del__ = lambda self: None
EdgeStatus_swigregister = _edge.EdgeStatus_swigregister
EdgeStatus_swigregister(EdgeStatus)


def Initialize():
    return _edge.Initialize()
Initialize = _edge.Initialize

def Terminate():
    return _edge.Terminate()
Terminate = _edge.Terminate

def GetUuid():
    return _edge.GetUuid()
GetUuid = _edge.GetUuid

def GetVersion():
    return _edge.GetVersion()
GetVersion = _edge.GetVersion

def GetVersionMessage():
    return _edge.GetVersionMessage()
GetVersionMessage = _edge.GetVersionMessage

def GetSystemTimestamp():
    return _edge.GetSystemTimestamp()
GetSystemTimestamp = _edge.GetSystemTimestamp

def SendHearthbeat():
    return _edge.SendHearthbeat()
SendHearthbeat = _edge.SendHearthbeat

def GetAppSpecificConfig():
    return _edge.GetAppSpecificConfig()
GetAppSpecificConfig = _edge.GetAppSpecificConfig

def GetAppSpecificConfigSection(path_in):
    return _edge.GetAppSpecificConfigSection(path_in)
GetAppSpecificConfigSection = _edge.GetAppSpecificConfigSection

def UploadFileToMindSphere(file_path_in):
    return _edge.UploadFileToMindSphere(file_path_in)
UploadFileToMindSphere = _edge.UploadFileToMindSphere
class EventHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventHandler, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _edge.delete_EventHandler
    __del__ = lambda self: None

    def Handle(self, event_source_in, event_name_in, event_data_in):
        return _edge.EventHandler_Handle(self, event_source_in, event_name_in, event_data_in)

    def __init__(self):
        if self.__class__ == EventHandler:
            _self = None
        else:
            _self = self
        this = _edge.new_EventHandler(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _edge.disown_EventHandler(self)
        return weakref_proxy(self)
EventHandler_swigregister = _edge.EventHandler_swigregister
EventHandler_swigregister(EventHandler)

class EventManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventManager, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _edge.delete_EventManager
    __del__ = lambda self: None

    def SubscribeEvent(self, event_name_in, event_handler_in):
        return _edge.EventManager_SubscribeEvent(self, event_name_in, event_handler_in)

    def UnSubscribeEvent(self, event_name_in):
        return _edge.EventManager_UnSubscribeEvent(self, event_name_in)

    def PublishEventMessage(self, event_destination_in, event_name_in, event_data_in):
        return _edge.EventManager_PublishEventMessage(self, event_destination_in, event_name_in, event_data_in)
EventManager_swigregister = _edge.EventManager_swigregister
EventManager_swigregister(EventManager)


def GetEventManagerInstance():
    return _edge.GetEventManagerInstance()
GetEventManagerInstance = _edge.GetEventManagerInstance
DATASOURCEACCESS_SUCCESS = _edge.DATASOURCEACCESS_SUCCESS
DATASOURCEACCESS_ERROR_UNDEFINED = _edge.DATASOURCEACCESS_ERROR_UNDEFINED
DATASOURCEACCESS_ERROR_PERMISSION_DENIED = _edge.DATASOURCEACCESS_ERROR_PERMISSION_DENIED
DATASOURCEACCESS_ERROR_INITIALISATION = _edge.DATASOURCEACCESS_ERROR_INITIALISATION
DATASOURCEACCESS_ERROR_FUNCTION_NOT_IMPLEMENTED = _edge.DATASOURCEACCESS_ERROR_FUNCTION_NOT_IMPLEMENTED
DATASOURCEACCESS_ERROR_DEVICE_NOT_REGISTERED = _edge.DATASOURCEACCESS_ERROR_DEVICE_NOT_REGISTERED
DATASOURCEACCESS_ERROR_SERVICE_NOT_IMPLEMENTED = _edge.DATASOURCEACCESS_ERROR_SERVICE_NOT_IMPLEMENTED
DATASOURCEACCESS_ERROR_FUNCTION_PARAMETER = _edge.DATASOURCEACCESS_ERROR_FUNCTION_PARAMETER
DATASOURCEACCESS_ERROR_COMMUNICATION = _edge.DATASOURCEACCESS_ERROR_COMMUNICATION
DATASOURCEACCESS_ERROR_FORBIDDEN = _edge.DATASOURCEACCESS_ERROR_FORBIDDEN
DATASOURCEACCESS_ERROR_WRONG_STATE = _edge.DATASOURCEACCESS_ERROR_WRONG_STATE
PARAMETERSERVICE_ERROR_PARAMETER_INDEX_NOT_FOUND = _edge.PARAMETERSERVICE_ERROR_PARAMETER_INDEX_NOT_FOUND
PARAMETERSERVICE_ERROR_CONVERT_ERROR = _edge.PARAMETERSERVICE_ERROR_CONVERT_ERROR
PARAMETERSERVICE_ERROR_COPY_ERROR = _edge.PARAMETERSERVICE_ERROR_COPY_ERROR
PARAMETERSERVICE_ERROR_BUFFER_ERROR = _edge.PARAMETERSERVICE_ERROR_BUFFER_ERROR
PARAMETERSERVICE_ERROR_CONNECTION_ERROR = _edge.PARAMETERSERVICE_ERROR_CONNECTION_ERROR
PARAMETERSERVICE_ERROR_FUNCTION_VALUE_NOT_SUPPORTED = _edge.PARAMETERSERVICE_ERROR_FUNCTION_VALUE_NOT_SUPPORTED
PARAMETERSERVICE_ERROR_INITIALIZATION = _edge.PARAMETERSERVICE_ERROR_INITIALIZATION
PARAMETERSERVICE_ERROR_WRONG_STATE = _edge.PARAMETERSERVICE_ERROR_WRONG_STATE
PARAMETERSERVICE_ERROR_FUNCTION_NOT_IMPLEMENTED = _edge.PARAMETERSERVICE_ERROR_FUNCTION_NOT_IMPLEMENTED
PARAMETERSERVICE_ERROR_PARAMETER_BLOCKED = _edge.PARAMETERSERVICE_ERROR_PARAMETER_BLOCKED
class ErrorObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorObject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _edge.new_ErrorObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Success(self):
        return _edge.ErrorObject_Success(self)

    def GetMessage(self):
        return _edge.ErrorObject_GetMessage(self)

    def GetCode(self):
        return _edge.ErrorObject_GetCode(self)

    def __eq__(self, x):
        return _edge.ErrorObject___eq__(self, x)

    def __ne__(self, x):
        return _edge.ErrorObject___ne__(self, x)
    __swig_destroy__ = _edge.delete_ErrorObject
    __del__ = lambda self: None
ErrorObject_swigregister = _edge.ErrorObject_swigregister
ErrorObject_swigregister(ErrorObject)

class ParameterValueObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterValueObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterValueObject, name)
    __repr__ = _swig_repr
    invalid = _edge.ParameterValueObject_invalid
    Bool = _edge.ParameterValueObject_Bool
    Char = _edge.ParameterValueObject_Char
    UChar = _edge.ParameterValueObject_UChar
    Int = _edge.ParameterValueObject_Int
    UInt = _edge.ParameterValueObject_UInt
    Long = _edge.ParameterValueObject_Long
    ULong = _edge.ParameterValueObject_ULong
    LongLong = _edge.ParameterValueObject_LongLong
    ULongLong = _edge.ParameterValueObject_ULongLong
    Double = _edge.ParameterValueObject_Double
    String = _edge.ParameterValueObject_String
    ValueArray = _edge.ParameterValueObject_ValueArray
    DateTime = _edge.ParameterValueObject_DateTime

    def __init__(self, *args):
        this = _edge.new_ParameterValueObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _edge.delete_ParameterValueObject
    __del__ = lambda self: None

    def GetValues(self):
        return _edge.ParameterValueObject_GetValues(self)

    def AddValue(self, value_in, type_code_in):
        return _edge.ParameterValueObject_AddValue(self, value_in, type_code_in)

    def ClearValues(self):
        return _edge.ParameterValueObject_ClearValues(self)
ParameterValueObject_swigregister = _edge.ParameterValueObject_swigregister
ParameterValueObject_swigregister(ParameterValueObject)

class ParameterDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _edge.new_ParameterDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _edge.delete_ParameterDefinition
    __del__ = lambda self: None

    def GetParamName(self):
        return _edge.ParameterDefinition_GetParamName(self)

    def GetParamIndex(self):
        return _edge.ParameterDefinition_GetParamIndex(self)

    def GetParamLength(self):
        return _edge.ParameterDefinition_GetParamLength(self)

    def GetValueObject(self):
        return _edge.ParameterDefinition_GetValueObject(self)

    def SetValueObject(self, param_value_in):
        return _edge.ParameterDefinition_SetValueObject(self, param_value_in)
ParameterDefinition_swigregister = _edge.ParameterDefinition_swigregister
ParameterDefinition_swigregister(ParameterDefinition)

class ParameterService(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterService, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterService, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _edge.delete_ParameterService
    __del__ = lambda self: None

    def ReadParameters(self, parameters):
        return _edge.ParameterService_ReadParameters(self, parameters)

    def ReadParameter(self, parameter):
        return _edge.ParameterService_ReadParameter(self, parameter)

    def WriteParameters(self, parameters):
        return _edge.ParameterService_WriteParameters(self, parameters)

    def WriteParameter(self, parameter):
        return _edge.ParameterService_WriteParameter(self, parameter)

    def GetName(self):
        return _edge.ParameterService_GetName(self)
ParameterService_swigregister = _edge.ParameterService_swigregister
ParameterService_swigregister(ParameterService)

class DataSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataSource, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _edge.new_DataSource()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _edge.delete_DataSource
    __del__ = lambda self: None

    def GetParameterServices(self):
        return _edge.DataSource_GetParameterServices(self)

    def GetName(self):
        return _edge.DataSource_GetName(self)
DataSource_swigregister = _edge.DataSource_swigregister
DataSource_swigregister(DataSource)

class DataSourceAccess(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSourceAccess, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataSourceAccess, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _edge.delete_DataSourceAccess
    __del__ = lambda self: None
    if _newclass:
        Initialize = staticmethod(_edge.DataSourceAccess_Initialize)
    else:
        Initialize = _edge.DataSourceAccess_Initialize
    if _newclass:
        GetDataSourceNames = staticmethod(_edge.DataSourceAccess_GetDataSourceNames)
    else:
        GetDataSourceNames = _edge.DataSourceAccess_GetDataSourceNames
    if _newclass:
        GetDataSource = staticmethod(_edge.DataSourceAccess_GetDataSource)
    else:
        GetDataSource = _edge.DataSourceAccess_GetDataSource

    def __init__(self):
        this = _edge.new_DataSourceAccess()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
DataSourceAccess_swigregister = _edge.DataSourceAccess_swigregister
DataSourceAccess_swigregister(DataSourceAccess)

def DataSourceAccess_Initialize(*args):
    return _edge.DataSourceAccess_Initialize(*args)
DataSourceAccess_Initialize = _edge.DataSourceAccess_Initialize

def DataSourceAccess_GetDataSourceNames(datasource_type_in, datasource_names_out):
    return _edge.DataSourceAccess_GetDataSourceNames(datasource_type_in, datasource_names_out)
DataSourceAccess_GetDataSourceNames = _edge.DataSourceAccess_GetDataSourceNames

def DataSourceAccess_GetDataSource(datasource_name_in, datasource_out):
    return _edge.DataSourceAccess_GetDataSource(datasource_name_in, datasource_out)
DataSourceAccess_GetDataSource = _edge.DataSourceAccess_GetDataSource

class ErrorObjectVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorObjectVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorObjectVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _edge.ErrorObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _edge.ErrorObjectVector___nonzero__(self)

    def __bool__(self):
        return _edge.ErrorObjectVector___bool__(self)

    def __len__(self):
        return _edge.ErrorObjectVector___len__(self)

    def __getslice__(self, i, j):
        return _edge.ErrorObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _edge.ErrorObjectVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _edge.ErrorObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _edge.ErrorObjectVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _edge.ErrorObjectVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _edge.ErrorObjectVector___setitem__(self, *args)

    def pop(self):
        return _edge.ErrorObjectVector_pop(self)

    def append(self, x):
        return _edge.ErrorObjectVector_append(self, x)

    def empty(self):
        return _edge.ErrorObjectVector_empty(self)

    def size(self):
        return _edge.ErrorObjectVector_size(self)

    def swap(self, v):
        return _edge.ErrorObjectVector_swap(self, v)

    def begin(self):
        return _edge.ErrorObjectVector_begin(self)

    def end(self):
        return _edge.ErrorObjectVector_end(self)

    def rbegin(self):
        return _edge.ErrorObjectVector_rbegin(self)

    def rend(self):
        return _edge.ErrorObjectVector_rend(self)

    def clear(self):
        return _edge.ErrorObjectVector_clear(self)

    def get_allocator(self):
        return _edge.ErrorObjectVector_get_allocator(self)

    def pop_back(self):
        return _edge.ErrorObjectVector_pop_back(self)

    def erase(self, *args):
        return _edge.ErrorObjectVector_erase(self, *args)

    def __init__(self, *args):
        this = _edge.new_ErrorObjectVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _edge.ErrorObjectVector_push_back(self, x)

    def front(self):
        return _edge.ErrorObjectVector_front(self)

    def back(self):
        return _edge.ErrorObjectVector_back(self)

    def assign(self, n, x):
        return _edge.ErrorObjectVector_assign(self, n, x)

    def resize(self, *args):
        return _edge.ErrorObjectVector_resize(self, *args)

    def insert(self, *args):
        return _edge.ErrorObjectVector_insert(self, *args)

    def reserve(self, n):
        return _edge.ErrorObjectVector_reserve(self, n)

    def capacity(self):
        return _edge.ErrorObjectVector_capacity(self)
    __swig_destroy__ = _edge.delete_ErrorObjectVector
    __del__ = lambda self: None
ErrorObjectVector_swigregister = _edge.ErrorObjectVector_swigregister
ErrorObjectVector_swigregister(ErrorObjectVector)

class ParameterServiceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterServiceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterServiceVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _edge.ParameterServiceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _edge.ParameterServiceVector___nonzero__(self)

    def __bool__(self):
        return _edge.ParameterServiceVector___bool__(self)

    def __len__(self):
        return _edge.ParameterServiceVector___len__(self)

    def __getslice__(self, i, j):
        return _edge.ParameterServiceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _edge.ParameterServiceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _edge.ParameterServiceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _edge.ParameterServiceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _edge.ParameterServiceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _edge.ParameterServiceVector___setitem__(self, *args)

    def pop(self):
        return _edge.ParameterServiceVector_pop(self)

    def append(self, x):
        return _edge.ParameterServiceVector_append(self, x)

    def empty(self):
        return _edge.ParameterServiceVector_empty(self)

    def size(self):
        return _edge.ParameterServiceVector_size(self)

    def swap(self, v):
        return _edge.ParameterServiceVector_swap(self, v)

    def begin(self):
        return _edge.ParameterServiceVector_begin(self)

    def end(self):
        return _edge.ParameterServiceVector_end(self)

    def rbegin(self):
        return _edge.ParameterServiceVector_rbegin(self)

    def rend(self):
        return _edge.ParameterServiceVector_rend(self)

    def clear(self):
        return _edge.ParameterServiceVector_clear(self)

    def get_allocator(self):
        return _edge.ParameterServiceVector_get_allocator(self)

    def pop_back(self):
        return _edge.ParameterServiceVector_pop_back(self)

    def erase(self, *args):
        return _edge.ParameterServiceVector_erase(self, *args)

    def __init__(self, *args):
        this = _edge.new_ParameterServiceVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _edge.ParameterServiceVector_push_back(self, x)

    def front(self):
        return _edge.ParameterServiceVector_front(self)

    def back(self):
        return _edge.ParameterServiceVector_back(self)

    def assign(self, n, x):
        return _edge.ParameterServiceVector_assign(self, n, x)

    def resize(self, *args):
        return _edge.ParameterServiceVector_resize(self, *args)

    def insert(self, *args):
        return _edge.ParameterServiceVector_insert(self, *args)

    def reserve(self, n):
        return _edge.ParameterServiceVector_reserve(self, n)

    def capacity(self):
        return _edge.ParameterServiceVector_capacity(self)
    __swig_destroy__ = _edge.delete_ParameterServiceVector
    __del__ = lambda self: None
ParameterServiceVector_swigregister = _edge.ParameterServiceVector_swigregister
ParameterServiceVector_swigregister(ParameterServiceVector)

class ParameterDefinitionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterDefinitionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterDefinitionVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _edge.ParameterDefinitionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _edge.ParameterDefinitionVector___nonzero__(self)

    def __bool__(self):
        return _edge.ParameterDefinitionVector___bool__(self)

    def __len__(self):
        return _edge.ParameterDefinitionVector___len__(self)

    def __getslice__(self, i, j):
        return _edge.ParameterDefinitionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _edge.ParameterDefinitionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _edge.ParameterDefinitionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _edge.ParameterDefinitionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _edge.ParameterDefinitionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _edge.ParameterDefinitionVector___setitem__(self, *args)

    def pop(self):
        return _edge.ParameterDefinitionVector_pop(self)

    def append(self, x):
        return _edge.ParameterDefinitionVector_append(self, x)

    def empty(self):
        return _edge.ParameterDefinitionVector_empty(self)

    def size(self):
        return _edge.ParameterDefinitionVector_size(self)

    def swap(self, v):
        return _edge.ParameterDefinitionVector_swap(self, v)

    def begin(self):
        return _edge.ParameterDefinitionVector_begin(self)

    def end(self):
        return _edge.ParameterDefinitionVector_end(self)

    def rbegin(self):
        return _edge.ParameterDefinitionVector_rbegin(self)

    def rend(self):
        return _edge.ParameterDefinitionVector_rend(self)

    def clear(self):
        return _edge.ParameterDefinitionVector_clear(self)

    def get_allocator(self):
        return _edge.ParameterDefinitionVector_get_allocator(self)

    def pop_back(self):
        return _edge.ParameterDefinitionVector_pop_back(self)

    def erase(self, *args):
        return _edge.ParameterDefinitionVector_erase(self, *args)

    def __init__(self, *args):
        this = _edge.new_ParameterDefinitionVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _edge.ParameterDefinitionVector_push_back(self, x)

    def front(self):
        return _edge.ParameterDefinitionVector_front(self)

    def back(self):
        return _edge.ParameterDefinitionVector_back(self)

    def assign(self, n, x):
        return _edge.ParameterDefinitionVector_assign(self, n, x)

    def resize(self, *args):
        return _edge.ParameterDefinitionVector_resize(self, *args)

    def insert(self, *args):
        return _edge.ParameterDefinitionVector_insert(self, *args)

    def reserve(self, n):
        return _edge.ParameterDefinitionVector_reserve(self, n)

    def capacity(self):
        return _edge.ParameterDefinitionVector_capacity(self)
    __swig_destroy__ = _edge.delete_ParameterDefinitionVector
    __del__ = lambda self: None
ParameterDefinitionVector_swigregister = _edge.ParameterDefinitionVector_swigregister
ParameterDefinitionVector_swigregister(ParameterDefinitionVector)

class ParameterValuePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterValuePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterValuePair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _edge.new_ParameterValuePair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _edge.ParameterValuePair_first_set
    __swig_getmethods__["first"] = _edge.ParameterValuePair_first_get
    if _newclass:
        first = _swig_property(_edge.ParameterValuePair_first_get, _edge.ParameterValuePair_first_set)
    __swig_setmethods__["second"] = _edge.ParameterValuePair_second_set
    __swig_getmethods__["second"] = _edge.ParameterValuePair_second_get
    if _newclass:
        second = _swig_property(_edge.ParameterValuePair_second_get, _edge.ParameterValuePair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _edge.delete_ParameterValuePair
    __del__ = lambda self: None
ParameterValuePair_swigregister = _edge.ParameterValuePair_swigregister
ParameterValuePair_swigregister(ParameterValuePair)

class ParameterValueVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterValueVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterValueVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _edge.ParameterValueVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _edge.ParameterValueVector___nonzero__(self)

    def __bool__(self):
        return _edge.ParameterValueVector___bool__(self)

    def __len__(self):
        return _edge.ParameterValueVector___len__(self)

    def __getslice__(self, i, j):
        return _edge.ParameterValueVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _edge.ParameterValueVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _edge.ParameterValueVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _edge.ParameterValueVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _edge.ParameterValueVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _edge.ParameterValueVector___setitem__(self, *args)

    def pop(self):
        return _edge.ParameterValueVector_pop(self)

    def append(self, x):
        return _edge.ParameterValueVector_append(self, x)

    def empty(self):
        return _edge.ParameterValueVector_empty(self)

    def size(self):
        return _edge.ParameterValueVector_size(self)

    def swap(self, v):
        return _edge.ParameterValueVector_swap(self, v)

    def begin(self):
        return _edge.ParameterValueVector_begin(self)

    def end(self):
        return _edge.ParameterValueVector_end(self)

    def rbegin(self):
        return _edge.ParameterValueVector_rbegin(self)

    def rend(self):
        return _edge.ParameterValueVector_rend(self)

    def clear(self):
        return _edge.ParameterValueVector_clear(self)

    def get_allocator(self):
        return _edge.ParameterValueVector_get_allocator(self)

    def pop_back(self):
        return _edge.ParameterValueVector_pop_back(self)

    def erase(self, *args):
        return _edge.ParameterValueVector_erase(self, *args)

    def __init__(self, *args):
        this = _edge.new_ParameterValueVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _edge.ParameterValueVector_push_back(self, x)

    def front(self):
        return _edge.ParameterValueVector_front(self)

    def back(self):
        return _edge.ParameterValueVector_back(self)

    def assign(self, n, x):
        return _edge.ParameterValueVector_assign(self, n, x)

    def resize(self, *args):
        return _edge.ParameterValueVector_resize(self, *args)

    def insert(self, *args):
        return _edge.ParameterValueVector_insert(self, *args)

    def reserve(self, n):
        return _edge.ParameterValueVector_reserve(self, n)

    def capacity(self):
        return _edge.ParameterValueVector_capacity(self)
    __swig_destroy__ = _edge.delete_ParameterValueVector
    __del__ = lambda self: None
ParameterValueVector_swigregister = _edge.ParameterValueVector_swigregister
ParameterValueVector_swigregister(ParameterValueVector)

# This file is compatible with both classic and new-style classes.


